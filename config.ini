# ===================================================================
#                  Configuration for AUTO VMAF ENCODER
# ===================================================================
# Instructions:
# 1. Fill in the [Paths] section with your FFmpeg tool locations.
# 2. Review ALL settings
# 3. Adjust any settings as needed to fine-tune performance and quality.
#
# Tip: Always use paths with a "/" instead of the standard Windows "\".
# Tip: Lines starting with # are comments and are safely ignored by the script.
# If settings with numerical values like "skip_start_seconds" are not desired, always set value to 0
# For any granular questions, copy the entire script (click edit in Notepad) and paste it into an AI.
# ===================================================================


# ===================================================================
#  1. Core Settings
# ===================================================================

[Encoder]
# --- Main Encoder Choice ---
# Use your NVIDIA GPU ('nvenc') for speed or your CPU ('svt_av1') for potentially higher quality.
encoder_type = svt_av1

[VMAF_Targeting]
# --- Target Quality ---
# The script will aim for this VMAF score. 95-98 is visually lossless for most content.
target_vmaf = 98.0

# How close to the target is acceptable (e.g., 95.8 is ok if target is 96.0 and tolerance is 0.2).
vmaf_tolerance = 1

# The range of CQ/CRF values the script will test (e.g., 20 to 45).
cq_search_min = 25	
cq_search_max = 35


# ===================================================================
#  2. Paths & File Handling
# ===================================================================

[Paths]
# --- REQUIRED: Point these to your FFmpeg executables ---
ffmpeg_path = C:/ffmpeg/bin/ffmpeg.exe
ffprobe_path = C:/ffmpeg/bin/ffprobe.exe
vmaf_model_path = C:/ffmpeg/bin/vmaf_v0.6.1.json

# --- Optional: Location for log and database files ---
database_path = C:/ffmpeg/bin/encoding_log.txt
vmaf_cache_path = C:/ffmpeg/bin/vmaf_cache.db
performance_db_path = C:/ffmpeg/bin/performance.db


[File_Management]
# ⚠️ Set to 'true' to DELETE the original file after a successful encode.
delete_source_file = false

# Text to add to the end of the new filename (e.g., video_av1.mkv).
output_suffix = _av1

# Where to save output files. Leave blank to save in the same folder as the source.
output_directory =

# Set to 'true' to look for videos in a different folder.
use_different_input_directory = false
input_directory =

# The minimum % of size reduction required to keep the new file.
# A value of 15.0 means the new file must be at least 15% smaller.
min_size_reduction_threshold = 15

# Skip encoding if target VMAF cannot be achieved within tolerance.
# Select true or false.
skip_encoding_if_target_not_reached = true

# If true, files that are skipped (e.g., for low size reduction) will be renamed.
# The suffix with a name matching skipped_file_suffix will be skipped regardless if rename_skipped_files is true or false.
rename_skipped_files = false
skipped_file_suffix = _notencoded


# ===================================================================
#  3. Detailed Encoder Settings NVENC
# ===================================================================

[NVENC]
# --- Settings for the 'nvenc' (NVIDIA GPU) encoder ---
# Preset (p1-p7) is the main knob for speed vs. quality. p1=Fastest, p7=Best Quality.
nvenc_preset = p1

# Quality modes: 'hq' is the standard for high quality. 'uhq' is for the newest GPUs (50 series Blackwell)
nvenc_quality_mode = uhq

[NVENC_Advanced]
# Extra command-line parameters for advanced users. Leave blank for default behavior.
# Type extra params separated by spaces exactly as you would type them in a command line.
extra_params =

# For NVENC, the hardcoded base settings are: -c:v av1_nvenc -rc vbr -cq str(quality_value)

# ===================================================================
#  4. Detailed Encoder Settings SVT_AV1
# ===================================================================

[SVT_AV1]
# --- Settings for the 'svt_av1' (CPU) encoder ---
# Preset (0-13) is the main knob for speed vs. quality. Lower is better quality but much slower. 6 is a great balance.
svt_av1_preset = 6

# Adds a cinematic film grain effect to the video. 0 is off. 8-12 is a light touch.
svt_av1_film_grain = 0

[SVT_AV1_Advanced]
# Extra command-line parameters for advanced users. Leave blank for default behavior.
# Type extra params separated by spaces exactly as you would type them in a command line.
extra_params =

# For SVT_AV1, the hardcoded base settings are: -c:v libsvtav1 -crf str(quality_value)

# ===================================================================
#  5. Performance 
# ===================================================================

[Performance]
# Number of videos to process at the same time. Match to your system's capability.
max_workers = 1

# Number of VMAF tests to run in parallel during the search phase. 3-5 is a good range.
num_parallel_vmaf_runs = 5

# Max number of search iterations for finding the best quality. 7 is plenty.
max_iterations = 7

# ===================================================================
#  6. Caching 
# ===================================================================

#Caching speeds up re-runs and improves ETA accuracy over time ---

[VMAF_Cache]

# The VMAF Cache (The "Answer Key")
# When enabled, the script saves the result of every single VMAF test to a database.
# If it ever needs to run the exact same test again (same file, same samples, same quality setting),
# it retrieves the answer instantly instead of re-doing the work.
# Highly recommended to keep this 'true'.
enable_cache = true


[Performance_Cache]
# The Performance Cache (The ETA "Memory")
# When enabled, the script logs the performance (e.g., encoding FPS) of every completed job.
# This historical data is used to make the ETA predictions for future jobs smarter and more accurate.
# Highly recommended to keep this 'true'.
enable_performance_cache = true


# ===================================================================
#  7. VMAF Sampling & Fine-Tuning
# ===================================================================

[VMAF_Sampling]
# --- How video samples are chosen for VMAF tests ---
# tier0 = Smart analysis of scene changes (requires PySceneDetect, best option).
# tier1 = Uses keyframes as sample points.
# tier2 = Simple time-based intervals.
sampling_method = tier0

# The length (in seconds) of each video clip used for testing.
sample_segment_duration = 5

# How many clips to combine to create the test sample.
num_samples = 5

# Encoder for creating the temporary sample file (software, nvenc, raw).
master_sample_encoder = raw

# (For tier0) Sensitivity for scene detection. 25-35 is a good range.
min_scene_score = 30.0

# (For tier0/tier1) Minimum number of scenes/keyframes needed to use that method.
min_scene_changes_required = 5
min_keyframes_required = 5

# (For tier 1&2) Skip intros or credits when taking samples.
skip_start_seconds = 0
skip_end_seconds = 0


# ===================================================================
#  8. File Filtering
# ===================================================================

[File_Filtering]
# --- Rules to automatically skip certain files ---
# 0 means that none of these settings are applied
# Skip files shorter than this many seconds.
min_duration_seconds = 0

# Skip files smaller than this many megabytes.
min_filesize_mb = 0

# Skip files already below a certain bitrate (in kbps).
min_bitrate_4k_kbps = 0
min_bitrate_1080p_kbps = 0
min_bitrate_720p_kbps = 0


# ===================================================================
#  9. Output color depth
# ===================================================================

[Output]
# --- Final output video settings ---
# AV1 compression works best with 10-bit, even if source file is 8-bit.
# source = Keep the original bit depth (8-bit or 10-bit).
# 8bit   = Force output to 8-bit.
# 10bit  = Force output to 10-bit (recommended for quality).
output_bit_depth = 10bit